// 这是力导向布局的算法代码
// 实现力导向布局算法需要实现一下几个函数
// 1. 初始化节点位置：为每个节点赋予初始位置，通常是在一个随机位置上，也可以通过一定的规则来初始化节点的位置。
// 2. 计算节点之间的相互作用力：根据弹簧-斥力模型，计算每个节点受到的力的大小和方向，包括连线节点之间的弹簧作用力和节点之间的斥力
// 3. 更行节点之间的位置：根据节点之间的相互作用力，更新每个节点的位置，以达到一个平衡的状态
// 4. 判断算法是否收敛：当节点的移动趋于平稳的时候，可以判定为节点已经达到平衡状态，可以收敛，算法停止迭代
// 5. 可视化节点：将节点之间的位置可视化，以便更好地理解节点之间的关系
// 一般来说，实现力导向布局算法还需要考虑很多细节问题，如边界控制，节点固定等，还需要使用一定的技巧优化算法提高效率，如空间分层和快速邻近搜索

// 1. 实现节点初始化位置,节点位置是计算出来的
// 先预定义一下画布宽高，和 nodes 对象
// 这是简单节点的初始化，后期是通过遍历节点树进行优化
const width = 300
const height = 500
var nodes = [{id: '0'}, {id:'1'}]
function initNodesPosition(nodes, width, height){
  nodes.forEach(function (node){
    // 在规定的区域内随机初始化节点的位置
    node.x = Math.random() * width
    node.y = Math.random() * height
  })
  return nodes // 把计算好的节点返回
}
// 调用函数
nodes = initNodesPosition(nodes, width, height)
console.log(nodes)

